// Generated by gencpp from file common/PositionControlResponse.msg
// DO NOT EDIT!


#ifndef COMMON_MESSAGE_POSITIONCONTROLRESPONSE_H
#define COMMON_MESSAGE_POSITIONCONTROLRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common
{
template <class ContainerAllocator>
struct PositionControlResponse_
{
  typedef PositionControlResponse_<ContainerAllocator> Type;

  PositionControlResponse_()
    : status_code(0)
    , err_msg()  {
    }
  PositionControlResponse_(const ContainerAllocator& _alloc)
    : status_code(0)
    , err_msg(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _status_code_type;
  _status_code_type status_code;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _err_msg_type;
  _err_msg_type err_msg;





  typedef boost::shared_ptr< ::common::PositionControlResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common::PositionControlResponse_<ContainerAllocator> const> ConstPtr;

}; // struct PositionControlResponse_

typedef ::common::PositionControlResponse_<std::allocator<void> > PositionControlResponse;

typedef boost::shared_ptr< ::common::PositionControlResponse > PositionControlResponsePtr;
typedef boost::shared_ptr< ::common::PositionControlResponse const> PositionControlResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common::PositionControlResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common::PositionControlResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common::PositionControlResponse_<ContainerAllocator1> & lhs, const ::common::PositionControlResponse_<ContainerAllocator2> & rhs)
{
  return lhs.status_code == rhs.status_code &&
    lhs.err_msg == rhs.err_msg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common::PositionControlResponse_<ContainerAllocator1> & lhs, const ::common::PositionControlResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::common::PositionControlResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common::PositionControlResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common::PositionControlResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common::PositionControlResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common::PositionControlResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common::PositionControlResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common::PositionControlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "80eaa364191b69673f6e2b8956e8e3a9";
  }

  static const char* value(const ::common::PositionControlResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x80eaa364191b6967ULL;
  static const uint64_t static_value2 = 0x3f6e2b8956e8e3a9ULL;
};

template<class ContainerAllocator>
struct DataType< ::common::PositionControlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common/PositionControlResponse";
  }

  static const char* value(const ::common::PositionControlResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common::PositionControlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 status_code #0失败，1完成\n"
"string err_msg\n"
"\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::common::PositionControlResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common::PositionControlResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status_code);
      stream.next(m.err_msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PositionControlResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common::PositionControlResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common::PositionControlResponse_<ContainerAllocator>& v)
  {
    s << indent << "status_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status_code);
    s << indent << "err_msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.err_msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MESSAGE_POSITIONCONTROLRESPONSE_H
