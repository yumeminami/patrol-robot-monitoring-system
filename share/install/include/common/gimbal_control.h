// Generated by gencpp from file common/gimbal_control.msg
// DO NOT EDIT!


#ifndef COMMON_MESSAGE_GIMBAL_CONTROL_H
#define COMMON_MESSAGE_GIMBAL_CONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common
{
template <class ContainerAllocator>
struct gimbal_control_
{
  typedef gimbal_control_<ContainerAllocator> Type;

  gimbal_control_()
    : command(0)
    , preset_index(0)  {
    }
  gimbal_control_(const ContainerAllocator& _alloc)
    : command(0)
    , preset_index(0)  {
  (void)_alloc;
    }



   typedef int32_t _command_type;
  _command_type command;

   typedef int32_t _preset_index_type;
  _preset_index_type preset_index;





  typedef boost::shared_ptr< ::common::gimbal_control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common::gimbal_control_<ContainerAllocator> const> ConstPtr;

}; // struct gimbal_control_

typedef ::common::gimbal_control_<std::allocator<void> > gimbal_control;

typedef boost::shared_ptr< ::common::gimbal_control > gimbal_controlPtr;
typedef boost::shared_ptr< ::common::gimbal_control const> gimbal_controlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common::gimbal_control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common::gimbal_control_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common::gimbal_control_<ContainerAllocator1> & lhs, const ::common::gimbal_control_<ContainerAllocator2> & rhs)
{
  return lhs.command == rhs.command &&
    lhs.preset_index == rhs.preset_index;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common::gimbal_control_<ContainerAllocator1> & lhs, const ::common::gimbal_control_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::common::gimbal_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common::gimbal_control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common::gimbal_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common::gimbal_control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common::gimbal_control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common::gimbal_control_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common::gimbal_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e9bd2fba3990c66b8df4336181b66716";
  }

  static const char* value(const ::common::gimbal_control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe9bd2fba3990c66bULL;
  static const uint64_t static_value2 = 0x8df4336181b66716ULL;
};

template<class ContainerAllocator>
struct DataType< ::common::gimbal_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common/gimbal_control";
  }

  static const char* value(const ::common::gimbal_control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common::gimbal_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 command #云台预置点命令 \n"
"#39:GOTO_PRESET移动到预置点\n"
"# 8:SET_PRESET 设置预置点\n"
"# 9:CLE_PRESET 清除预置点\n"
"\n"
"int32 preset_index #预置点编号\n"
"#去下面的网络界面设置预置点，移动好之后选择某个预置点按下设置符号即可设置\n"
"#http://10.92.36.1/doc/page/config.asp\n"
"\n"
"\n"
;
  }

  static const char* value(const ::common::gimbal_control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common::gimbal_control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
      stream.next(m.preset_index);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gimbal_control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common::gimbal_control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common::gimbal_control_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<int32_t>::stream(s, indent + "  ", v.command);
    s << indent << "preset_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.preset_index);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MESSAGE_GIMBAL_CONTROL_H
