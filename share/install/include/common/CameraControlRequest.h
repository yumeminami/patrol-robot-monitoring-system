// Generated by gencpp from file common/CameraControlRequest.msg
// DO NOT EDIT!


#ifndef COMMON_MESSAGE_CAMERACONTROLREQUEST_H
#define COMMON_MESSAGE_CAMERACONTROLREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common
{
template <class ContainerAllocator>
struct CameraControlRequest_
{
  typedef CameraControlRequest_<ContainerAllocator> Type;

  CameraControlRequest_()
    : camera_command(0)  {
    }
  CameraControlRequest_(const ContainerAllocator& _alloc)
    : camera_command(0)  {
  (void)_alloc;
    }



   typedef int32_t _camera_command_type;
  _camera_command_type camera_command;





  typedef boost::shared_ptr< ::common::CameraControlRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common::CameraControlRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CameraControlRequest_

typedef ::common::CameraControlRequest_<std::allocator<void> > CameraControlRequest;

typedef boost::shared_ptr< ::common::CameraControlRequest > CameraControlRequestPtr;
typedef boost::shared_ptr< ::common::CameraControlRequest const> CameraControlRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common::CameraControlRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common::CameraControlRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common::CameraControlRequest_<ContainerAllocator1> & lhs, const ::common::CameraControlRequest_<ContainerAllocator2> & rhs)
{
  return lhs.camera_command == rhs.camera_command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common::CameraControlRequest_<ContainerAllocator1> & lhs, const ::common::CameraControlRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::common::CameraControlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common::CameraControlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common::CameraControlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common::CameraControlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common::CameraControlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common::CameraControlRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common::CameraControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a705f3ae2c77fa51379c4dc7f4a2e7ec";
  }

  static const char* value(const ::common::CameraControlRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa705f3ae2c77fa51ULL;
  static const uint64_t static_value2 = 0x379c4dc7f4a2e7ecULL;
};

template<class ContainerAllocator>
struct DataType< ::common::CameraControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common/CameraControlRequest";
  }

  static const char* value(const ::common::CameraControlRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common::CameraControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 camera_command\n"
"# 相机命令：\n"
"# 0:停止预览\n"
"# 1:彩色相机预览\n"
"# 2:彩色相机预览+保存\n"
"# 3:红外相机预览\n"
"# 4:预览+保存\n"
;
  }

  static const char* value(const ::common::CameraControlRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common::CameraControlRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.camera_command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CameraControlRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common::CameraControlRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common::CameraControlRequest_<ContainerAllocator>& v)
  {
    s << indent << "camera_command: ";
    Printer<int32_t>::stream(s, indent + "  ", v.camera_command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MESSAGE_CAMERACONTROLREQUEST_H
