// Generated by gencpp from file zj_robot/motion_controlResult.msg
// DO NOT EDIT!


#ifndef ZJ_ROBOT_MESSAGE_MOTION_CONTROLRESULT_H
#define ZJ_ROBOT_MESSAGE_MOTION_CONTROLRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace zj_robot
{
template <class ContainerAllocator>
struct motion_controlResult_
{
  typedef motion_controlResult_<ContainerAllocator> Type;

  motion_controlResult_()
    : inposition(false)  {
    }
  motion_controlResult_(const ContainerAllocator& _alloc)
    : inposition(false)  {
  (void)_alloc;
    }



   typedef uint8_t _inposition_type;
  _inposition_type inposition;





  typedef boost::shared_ptr< ::zj_robot::motion_controlResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zj_robot::motion_controlResult_<ContainerAllocator> const> ConstPtr;

}; // struct motion_controlResult_

typedef ::zj_robot::motion_controlResult_<std::allocator<void> > motion_controlResult;

typedef boost::shared_ptr< ::zj_robot::motion_controlResult > motion_controlResultPtr;
typedef boost::shared_ptr< ::zj_robot::motion_controlResult const> motion_controlResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zj_robot::motion_controlResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zj_robot::motion_controlResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::zj_robot::motion_controlResult_<ContainerAllocator1> & lhs, const ::zj_robot::motion_controlResult_<ContainerAllocator2> & rhs)
{
  return lhs.inposition == rhs.inposition;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::zj_robot::motion_controlResult_<ContainerAllocator1> & lhs, const ::zj_robot::motion_controlResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace zj_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::zj_robot::motion_controlResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zj_robot::motion_controlResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zj_robot::motion_controlResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zj_robot::motion_controlResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zj_robot::motion_controlResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zj_robot::motion_controlResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zj_robot::motion_controlResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1a33a407c88c263cad076c785a4007a1";
  }

  static const char* value(const ::zj_robot::motion_controlResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1a33a407c88c263cULL;
  static const uint64_t static_value2 = 0xad076c785a4007a1ULL;
};

template<class ContainerAllocator>
struct DataType< ::zj_robot::motion_controlResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zj_robot/motion_controlResult";
  }

  static const char* value(const ::zj_robot::motion_controlResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zj_robot::motion_controlResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#是否到达指定位置\n"
"bool inposition\n"
;
  }

  static const char* value(const ::zj_robot::motion_controlResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zj_robot::motion_controlResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.inposition);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motion_controlResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zj_robot::motion_controlResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zj_robot::motion_controlResult_<ContainerAllocator>& v)
  {
    s << indent << "inposition: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.inposition);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZJ_ROBOT_MESSAGE_MOTION_CONTROLRESULT_H
