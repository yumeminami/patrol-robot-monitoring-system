// Generated by gencpp from file common/PTZControlRequest.msg
// DO NOT EDIT!


#ifndef COMMON_MESSAGE_PTZCONTROLREQUEST_H
#define COMMON_MESSAGE_PTZCONTROLREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common
{
template <class ContainerAllocator>
struct PTZControlRequest_
{
  typedef PTZControlRequest_<ContainerAllocator> Type;

  PTZControlRequest_()
    : P(0)
    , T(0)
    , Z(0)  {
    }
  PTZControlRequest_(const ContainerAllocator& _alloc)
    : P(0)
    , T(0)
    , Z(0)  {
  (void)_alloc;
    }



   typedef int32_t _P_type;
  _P_type P;

   typedef int32_t _T_type;
  _T_type T;

   typedef int32_t _Z_type;
  _Z_type Z;





  typedef boost::shared_ptr< ::common::PTZControlRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common::PTZControlRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PTZControlRequest_

typedef ::common::PTZControlRequest_<std::allocator<void> > PTZControlRequest;

typedef boost::shared_ptr< ::common::PTZControlRequest > PTZControlRequestPtr;
typedef boost::shared_ptr< ::common::PTZControlRequest const> PTZControlRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common::PTZControlRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common::PTZControlRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common::PTZControlRequest_<ContainerAllocator1> & lhs, const ::common::PTZControlRequest_<ContainerAllocator2> & rhs)
{
  return lhs.P == rhs.P &&
    lhs.T == rhs.T &&
    lhs.Z == rhs.Z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common::PTZControlRequest_<ContainerAllocator1> & lhs, const ::common::PTZControlRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::common::PTZControlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common::PTZControlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common::PTZControlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common::PTZControlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common::PTZControlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common::PTZControlRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common::PTZControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "370f4495401bb587906b97e72c677f4e";
  }

  static const char* value(const ::common::PTZControlRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x370f4495401bb587ULL;
  static const uint64_t static_value2 = 0x906b97e72c677f4eULL;
};

template<class ContainerAllocator>
struct DataType< ::common::PTZControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common/PTZControlRequest";
  }

  static const char* value(const ::common::PTZControlRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common::PTZControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 P\n"
"int32 T\n"
"int32 Z\n"
;
  }

  static const char* value(const ::common::PTZControlRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common::PTZControlRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.P);
      stream.next(m.T);
      stream.next(m.Z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PTZControlRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common::PTZControlRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common::PTZControlRequest_<ContainerAllocator>& v)
  {
    s << indent << "P: ";
    Printer<int32_t>::stream(s, indent + "  ", v.P);
    s << indent << "T: ";
    Printer<int32_t>::stream(s, indent + "  ", v.T);
    s << indent << "Z: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MESSAGE_PTZCONTROLREQUEST_H
