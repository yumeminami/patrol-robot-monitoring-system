// Generated by gencpp from file common/sensor_data.msg
// DO NOT EDIT!


#ifndef COMMON_MESSAGE_SENSOR_DATA_H
#define COMMON_MESSAGE_SENSOR_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common
{
template <class ContainerAllocator>
struct sensor_data_
{
  typedef sensor_data_<ContainerAllocator> Type;

  sensor_data_()
    : temperature(0.0)
    , humidity(0.0)
    , light(0.0)
    , PM1_0(0)
    , PM2_5(0)
    , PM10(0)
    , smoke1(0)
    , smoke2(0)  {
    }
  sensor_data_(const ContainerAllocator& _alloc)
    : temperature(0.0)
    , humidity(0.0)
    , light(0.0)
    , PM1_0(0)
    , PM2_5(0)
    , PM10(0)
    , smoke1(0)
    , smoke2(0)  {
  (void)_alloc;
    }



   typedef float _temperature_type;
  _temperature_type temperature;

   typedef float _humidity_type;
  _humidity_type humidity;

   typedef float _light_type;
  _light_type light;

   typedef int32_t _PM1_0_type;
  _PM1_0_type PM1_0;

   typedef int32_t _PM2_5_type;
  _PM2_5_type PM2_5;

   typedef int32_t _PM10_type;
  _PM10_type PM10;

   typedef int32_t _smoke1_type;
  _smoke1_type smoke1;

   typedef int32_t _smoke2_type;
  _smoke2_type smoke2;





  typedef boost::shared_ptr< ::common::sensor_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common::sensor_data_<ContainerAllocator> const> ConstPtr;

}; // struct sensor_data_

typedef ::common::sensor_data_<std::allocator<void> > sensor_data;

typedef boost::shared_ptr< ::common::sensor_data > sensor_dataPtr;
typedef boost::shared_ptr< ::common::sensor_data const> sensor_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common::sensor_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common::sensor_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common::sensor_data_<ContainerAllocator1> & lhs, const ::common::sensor_data_<ContainerAllocator2> & rhs)
{
  return lhs.temperature == rhs.temperature &&
    lhs.humidity == rhs.humidity &&
    lhs.light == rhs.light &&
    lhs.PM1_0 == rhs.PM1_0 &&
    lhs.PM2_5 == rhs.PM2_5 &&
    lhs.PM10 == rhs.PM10 &&
    lhs.smoke1 == rhs.smoke1 &&
    lhs.smoke2 == rhs.smoke2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common::sensor_data_<ContainerAllocator1> & lhs, const ::common::sensor_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::common::sensor_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common::sensor_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common::sensor_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common::sensor_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common::sensor_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common::sensor_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common::sensor_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2514f8bdc76a9a175afe9b9b60de1304";
  }

  static const char* value(const ::common::sensor_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2514f8bdc76a9a17ULL;
  static const uint64_t static_value2 = 0x5afe9b9b60de1304ULL;
};

template<class ContainerAllocator>
struct DataType< ::common::sensor_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common/sensor_data";
  }

  static const char* value(const ::common::sensor_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common::sensor_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 temperature\n"
"float32 humidity\n"
"\n"
"float32 light\n"
"int32 PM1_0\n"
"int32 PM2_5\n"
"int32 PM10\n"
"int32 smoke1\n"
"int32 smoke2\n"
"\n"
"\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::common::sensor_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common::sensor_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.temperature);
      stream.next(m.humidity);
      stream.next(m.light);
      stream.next(m.PM1_0);
      stream.next(m.PM2_5);
      stream.next(m.PM10);
      stream.next(m.smoke1);
      stream.next(m.smoke2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sensor_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common::sensor_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common::sensor_data_<ContainerAllocator>& v)
  {
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
    s << indent << "humidity: ";
    Printer<float>::stream(s, indent + "  ", v.humidity);
    s << indent << "light: ";
    Printer<float>::stream(s, indent + "  ", v.light);
    s << indent << "PM1_0: ";
    Printer<int32_t>::stream(s, indent + "  ", v.PM1_0);
    s << indent << "PM2_5: ";
    Printer<int32_t>::stream(s, indent + "  ", v.PM2_5);
    s << indent << "PM10: ";
    Printer<int32_t>::stream(s, indent + "  ", v.PM10);
    s << indent << "smoke1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.smoke1);
    s << indent << "smoke2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.smoke2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MESSAGE_SENSOR_DATA_H
