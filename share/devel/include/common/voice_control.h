// Generated by gencpp from file common/voice_control.msg
// DO NOT EDIT!


#ifndef COMMON_MESSAGE_VOICE_CONTROL_H
#define COMMON_MESSAGE_VOICE_CONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common
{
template <class ContainerAllocator>
struct voice_control_
{
  typedef voice_control_<ContainerAllocator> Type;

  voice_control_()
    : voice_command(0)  {
    }
  voice_control_(const ContainerAllocator& _alloc)
    : voice_command(0)  {
  (void)_alloc;
    }



   typedef int32_t _voice_command_type;
  _voice_command_type voice_command;





  typedef boost::shared_ptr< ::common::voice_control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common::voice_control_<ContainerAllocator> const> ConstPtr;

}; // struct voice_control_

typedef ::common::voice_control_<std::allocator<void> > voice_control;

typedef boost::shared_ptr< ::common::voice_control > voice_controlPtr;
typedef boost::shared_ptr< ::common::voice_control const> voice_controlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common::voice_control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common::voice_control_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common::voice_control_<ContainerAllocator1> & lhs, const ::common::voice_control_<ContainerAllocator2> & rhs)
{
  return lhs.voice_command == rhs.voice_command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common::voice_control_<ContainerAllocator1> & lhs, const ::common::voice_control_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::common::voice_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common::voice_control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common::voice_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common::voice_control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common::voice_control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common::voice_control_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common::voice_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab142bb934096e43e563146c9b3dc6ca";
  }

  static const char* value(const ::common::voice_control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab142bb934096e43ULL;
  static const uint64_t static_value2 = 0xe563146c9b3dc6caULL;
};

template<class ContainerAllocator>
struct DataType< ::common::voice_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common/voice_control";
  }

  static const char* value(const ::common::voice_control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common::voice_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 voice_command \n"
"#语音控制命令 0停止\n"
;
  }

  static const char* value(const ::common::voice_control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common::voice_control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.voice_command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct voice_control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common::voice_control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common::voice_control_<ContainerAllocator>& v)
  {
    s << indent << "voice_command: ";
    Printer<int32_t>::stream(s, indent + "  ", v.voice_command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MESSAGE_VOICE_CONTROL_H
