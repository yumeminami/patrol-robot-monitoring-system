# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from common/sensor_data.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class sensor_data(genpy.Message):
  _md5sum = "2514f8bdc76a9a175afe9b9b60de1304"
  _type = "common/sensor_data"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 temperature
float32 humidity

float32 light
int32 PM1_0
int32 PM2_5
int32 PM10
int32 smoke1
int32 smoke2





"""
  __slots__ = ['temperature','humidity','light','PM1_0','PM2_5','PM10','smoke1','smoke2']
  _slot_types = ['float32','float32','float32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       temperature,humidity,light,PM1_0,PM2_5,PM10,smoke1,smoke2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(sensor_data, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.temperature is None:
        self.temperature = 0.
      if self.humidity is None:
        self.humidity = 0.
      if self.light is None:
        self.light = 0.
      if self.PM1_0 is None:
        self.PM1_0 = 0
      if self.PM2_5 is None:
        self.PM2_5 = 0
      if self.PM10 is None:
        self.PM10 = 0
      if self.smoke1 is None:
        self.smoke1 = 0
      if self.smoke2 is None:
        self.smoke2 = 0
    else:
      self.temperature = 0.
      self.humidity = 0.
      self.light = 0.
      self.PM1_0 = 0
      self.PM2_5 = 0
      self.PM10 = 0
      self.smoke1 = 0
      self.smoke2 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3f5i().pack(_x.temperature, _x.humidity, _x.light, _x.PM1_0, _x.PM2_5, _x.PM10, _x.smoke1, _x.smoke2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.temperature, _x.humidity, _x.light, _x.PM1_0, _x.PM2_5, _x.PM10, _x.smoke1, _x.smoke2,) = _get_struct_3f5i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3f5i().pack(_x.temperature, _x.humidity, _x.light, _x.PM1_0, _x.PM2_5, _x.PM10, _x.smoke1, _x.smoke2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.temperature, _x.humidity, _x.light, _x.PM1_0, _x.PM2_5, _x.PM10, _x.smoke1, _x.smoke2,) = _get_struct_3f5i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f5i = None
def _get_struct_3f5i():
    global _struct_3f5i
    if _struct_3f5i is None:
        _struct_3f5i = struct.Struct("<3f5i")
    return _struct_3f5i
