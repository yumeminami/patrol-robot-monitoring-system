// Generated by gencpp from file common/PatrolControlRequest.msg
// DO NOT EDIT!


#ifndef COMMON_MESSAGE_PATROLCONTROLREQUEST_H
#define COMMON_MESSAGE_PATROLCONTROLREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common
{
template <class ContainerAllocator>
struct PatrolControlRequest_
{
  typedef PatrolControlRequest_<ContainerAllocator> Type;

  PatrolControlRequest_()
    : patrol_command(0)
    , xml_data()  {
    }
  PatrolControlRequest_(const ContainerAllocator& _alloc)
    : patrol_command(0)
    , xml_data(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _patrol_command_type;
  _patrol_command_type patrol_command;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _xml_data_type;
  _xml_data_type xml_data;





  typedef boost::shared_ptr< ::common::PatrolControlRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common::PatrolControlRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PatrolControlRequest_

typedef ::common::PatrolControlRequest_<std::allocator<void> > PatrolControlRequest;

typedef boost::shared_ptr< ::common::PatrolControlRequest > PatrolControlRequestPtr;
typedef boost::shared_ptr< ::common::PatrolControlRequest const> PatrolControlRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common::PatrolControlRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common::PatrolControlRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common::PatrolControlRequest_<ContainerAllocator1> & lhs, const ::common::PatrolControlRequest_<ContainerAllocator2> & rhs)
{
  return lhs.patrol_command == rhs.patrol_command &&
    lhs.xml_data == rhs.xml_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common::PatrolControlRequest_<ContainerAllocator1> & lhs, const ::common::PatrolControlRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::common::PatrolControlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common::PatrolControlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common::PatrolControlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common::PatrolControlRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common::PatrolControlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common::PatrolControlRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common::PatrolControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7a30c6751a8440ad9870f88bf1b71c38";
  }

  static const char* value(const ::common::PatrolControlRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7a30c6751a8440adULL;
  static const uint64_t static_value2 = 0x9870f88bf1b71c38ULL;
};

template<class ContainerAllocator>
struct DataType< ::common::PatrolControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common/PatrolControlRequest";
  }

  static const char* value(const ::common::PatrolControlRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common::PatrolControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 patrol_command \n"
"#0结束巡检节点 1开启巡检节点+更新任务xml文件\n"
"#任务进行过程中 patrol_state为2代表巡检任务正在执行\n"
"#               patrol_state为0代表节点处于待命状态，可以随时开启巡检\n"
"string xml_data\n"
;
  }

  static const char* value(const ::common::PatrolControlRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common::PatrolControlRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.patrol_command);
      stream.next(m.xml_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PatrolControlRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common::PatrolControlRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common::PatrolControlRequest_<ContainerAllocator>& v)
  {
    s << indent << "patrol_command: ";
    Printer<int32_t>::stream(s, indent + "  ", v.patrol_command);
    s << indent << "xml_data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.xml_data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MESSAGE_PATROLCONTROLREQUEST_H
