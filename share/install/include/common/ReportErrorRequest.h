// Generated by gencpp from file common/ReportErrorRequest.msg
// DO NOT EDIT!


#ifndef COMMON_MESSAGE_REPORTERRORREQUEST_H
#define COMMON_MESSAGE_REPORTERRORREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common
{
template <class ContainerAllocator>
struct ReportErrorRequest_
{
  typedef ReportErrorRequest_<ContainerAllocator> Type;

  ReportErrorRequest_()
    : error_code(0)
    , error_string()  {
    }
  ReportErrorRequest_(const ContainerAllocator& _alloc)
    : error_code(0)
    , error_string(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _error_code_type;
  _error_code_type error_code;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _error_string_type;
  _error_string_type error_string;





  typedef boost::shared_ptr< ::common::ReportErrorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common::ReportErrorRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ReportErrorRequest_

typedef ::common::ReportErrorRequest_<std::allocator<void> > ReportErrorRequest;

typedef boost::shared_ptr< ::common::ReportErrorRequest > ReportErrorRequestPtr;
typedef boost::shared_ptr< ::common::ReportErrorRequest const> ReportErrorRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common::ReportErrorRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common::ReportErrorRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common::ReportErrorRequest_<ContainerAllocator1> & lhs, const ::common::ReportErrorRequest_<ContainerAllocator2> & rhs)
{
  return lhs.error_code == rhs.error_code &&
    lhs.error_string == rhs.error_string;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common::ReportErrorRequest_<ContainerAllocator1> & lhs, const ::common::ReportErrorRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::common::ReportErrorRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common::ReportErrorRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common::ReportErrorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common::ReportErrorRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common::ReportErrorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common::ReportErrorRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common::ReportErrorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "400a5a1d7b7bb25ab2ea02462becfb3b";
  }

  static const char* value(const ::common::ReportErrorRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x400a5a1d7b7bb25aULL;
  static const uint64_t static_value2 = 0xb2ea02462becfb3bULL;
};

template<class ContainerAllocator>
struct DataType< ::common::ReportErrorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common/ReportErrorRequest";
  }

  static const char* value(const ::common::ReportErrorRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common::ReportErrorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 error_code\n"
"string error_string\n"
"# 1 无法对齐防火门金属传感器\n"
"# 2 无法对齐充电金属传感器\n"
"# 3 无法打开防火门\n"
"# 4 无法关闭防火门\n"
"# 5 无法开启充电\n"
"# 6 无法关闭充电\n"
;
  }

  static const char* value(const ::common::ReportErrorRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common::ReportErrorRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.error_code);
      stream.next(m.error_string);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReportErrorRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common::ReportErrorRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common::ReportErrorRequest_<ContainerAllocator>& v)
  {
    s << indent << "error_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "error_string: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.error_string);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MESSAGE_REPORTERRORREQUEST_H
