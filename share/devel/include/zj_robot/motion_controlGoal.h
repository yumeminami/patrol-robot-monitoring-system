// Generated by gencpp from file zj_robot/motion_controlGoal.msg
// DO NOT EDIT!


#ifndef ZJ_ROBOT_MESSAGE_MOTION_CONTROLGOAL_H
#define ZJ_ROBOT_MESSAGE_MOTION_CONTROLGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace zj_robot
{
template <class ContainerAllocator>
struct motion_controlGoal_
{
  typedef motion_controlGoal_<ContainerAllocator> Type;

  motion_controlGoal_()
    : ABSorREL(0)
    , target_position(0)
    , velocity(0.0)  {
    }
  motion_controlGoal_(const ContainerAllocator& _alloc)
    : ABSorREL(0)
    , target_position(0)
    , velocity(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _ABSorREL_type;
  _ABSorREL_type ABSorREL;

   typedef int32_t _target_position_type;
  _target_position_type target_position;

   typedef float _velocity_type;
  _velocity_type velocity;





  typedef boost::shared_ptr< ::zj_robot::motion_controlGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zj_robot::motion_controlGoal_<ContainerAllocator> const> ConstPtr;

}; // struct motion_controlGoal_

typedef ::zj_robot::motion_controlGoal_<std::allocator<void> > motion_controlGoal;

typedef boost::shared_ptr< ::zj_robot::motion_controlGoal > motion_controlGoalPtr;
typedef boost::shared_ptr< ::zj_robot::motion_controlGoal const> motion_controlGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zj_robot::motion_controlGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zj_robot::motion_controlGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::zj_robot::motion_controlGoal_<ContainerAllocator1> & lhs, const ::zj_robot::motion_controlGoal_<ContainerAllocator2> & rhs)
{
  return lhs.ABSorREL == rhs.ABSorREL &&
    lhs.target_position == rhs.target_position &&
    lhs.velocity == rhs.velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::zj_robot::motion_controlGoal_<ContainerAllocator1> & lhs, const ::zj_robot::motion_controlGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace zj_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::zj_robot::motion_controlGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zj_robot::motion_controlGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zj_robot::motion_controlGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zj_robot::motion_controlGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zj_robot::motion_controlGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zj_robot::motion_controlGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zj_robot::motion_controlGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ca92a3bf81e86dbf05d6be4d70513968";
  }

  static const char* value(const ::zj_robot::motion_controlGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xca92a3bf81e86dbfULL;
  static const uint64_t static_value2 = 0x05d6be4d70513968ULL;
};

template<class ContainerAllocator>
struct DataType< ::zj_robot::motion_controlGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zj_robot/motion_controlGoal";
  }

  static const char* value(const ::zj_robot::motion_controlGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zj_robot::motion_controlGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#位置控制action\n"
"\n"
"#目标位置 单位m\n"
"int32 ABSorREL #相对或绝对\n"
"int32 target_position\n"
"float32 velocity\n"
;
  }

  static const char* value(const ::zj_robot::motion_controlGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zj_robot::motion_controlGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ABSorREL);
      stream.next(m.target_position);
      stream.next(m.velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motion_controlGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zj_robot::motion_controlGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zj_robot::motion_controlGoal_<ContainerAllocator>& v)
  {
    s << indent << "ABSorREL: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ABSorREL);
    s << indent << "target_position: ";
    Printer<int32_t>::stream(s, indent + "  ", v.target_position);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZJ_ROBOT_MESSAGE_MOTION_CONTROLGOAL_H
