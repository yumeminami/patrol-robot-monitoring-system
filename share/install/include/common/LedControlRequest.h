// Generated by gencpp from file common/LedControlRequest.msg
// DO NOT EDIT!


#ifndef COMMON_MESSAGE_LEDCONTROLREQUEST_H
#define COMMON_MESSAGE_LEDCONTROLREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common
{
template <class ContainerAllocator>
struct LedControlRequest_
{
  typedef LedControlRequest_<ContainerAllocator> Type;

  LedControlRequest_()
    : num(0)
    , R()
    , G()
    , B()  {
    }
  LedControlRequest_(const ContainerAllocator& _alloc)
    : num(0)
    , R(_alloc)
    , G(_alloc)
    , B(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _num_type;
  _num_type num;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _R_type;
  _R_type R;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _G_type;
  _G_type G;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _B_type;
  _B_type B;





  typedef boost::shared_ptr< ::common::LedControlRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common::LedControlRequest_<ContainerAllocator> const> ConstPtr;

}; // struct LedControlRequest_

typedef ::common::LedControlRequest_<std::allocator<void> > LedControlRequest;

typedef boost::shared_ptr< ::common::LedControlRequest > LedControlRequestPtr;
typedef boost::shared_ptr< ::common::LedControlRequest const> LedControlRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common::LedControlRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common::LedControlRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common::LedControlRequest_<ContainerAllocator1> & lhs, const ::common::LedControlRequest_<ContainerAllocator2> & rhs)
{
  return lhs.num == rhs.num &&
    lhs.R == rhs.R &&
    lhs.G == rhs.G &&
    lhs.B == rhs.B;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common::LedControlRequest_<ContainerAllocator1> & lhs, const ::common::LedControlRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::common::LedControlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common::LedControlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common::LedControlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common::LedControlRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common::LedControlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common::LedControlRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common::LedControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "761fe52a3b186c63a2004f6346027878";
  }

  static const char* value(const ::common::LedControlRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x761fe52a3b186c63ULL;
  static const uint64_t static_value2 = 0xa2004f6346027878ULL;
};

template<class ContainerAllocator>
struct DataType< ::common::LedControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common/LedControlRequest";
  }

  static const char* value(const ::common::LedControlRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common::LedControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#灯带控制 num表示灯的数量\n"
"int32 num\n"
"int32[] R\n"
"int32[] G\n"
"int32[] B\n"
;
  }

  static const char* value(const ::common::LedControlRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common::LedControlRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num);
      stream.next(m.R);
      stream.next(m.G);
      stream.next(m.B);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LedControlRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common::LedControlRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common::LedControlRequest_<ContainerAllocator>& v)
  {
    s << indent << "num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num);
    s << indent << "R[]" << std::endl;
    for (size_t i = 0; i < v.R.size(); ++i)
    {
      s << indent << "  R[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.R[i]);
    }
    s << indent << "G[]" << std::endl;
    for (size_t i = 0; i < v.G.size(); ++i)
    {
      s << indent << "  G[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.G[i]);
    }
    s << indent << "B[]" << std::endl;
    for (size_t i = 0; i < v.B.size(); ++i)
    {
      s << indent << "  B[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.B[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MESSAGE_LEDCONTROLREQUEST_H
